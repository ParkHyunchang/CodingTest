/*
10. 봉우리
설명
지도 정보가 N*N 격자판에 주어집니다. 각 격자에는 그 지역의 높이가 쓰여있습니다.
각 격자판의 숫자 중 자신의 상하좌우 숫자보다 큰 숫자는 봉우리 지역입니다. 봉우리 지역이 몇 개 있는 지 알아내는 프로그램을 작성하세요.
격자의 가장자리는 0으로 초기화 되었다고 가정한다.
만약 N=5 이고, 격자판의 숫자가 다음과 같다면 봉우리의 개수는 10개입니다.

-------------------------------------------
|  0  |  0  |  0  |  0  |  0  |  0  |  0  |
-------------------------------------------
|  0  | 5봉  |  3  | 7봉  |  2  | 3봉  |  0  |
-------------------------------------------
|  0  |  3  | 7봉  |  1  | 6봉  |  1  |  0  |
-------------------------------------------
|  0  | 7봉  |  2  |  5  |  3  | 4봉  |  0  |
-------------------------------------------
|  0  |  4  |  3  | 6봉  |  4  |  1  |  0  |
-------------------------------------------
|  0  | 8봉  |  7  |  3  | 5봉  |  2  |  0  |
-------------------------------------------
|  0  |  0  |  0  |  0  |  0  |  0  |  0  |
-------------------------------------------


입력
첫 줄에 자연수 N이 주어진다.(2<=N<=50)
두 번째 줄부터 N줄에 걸쳐 각 줄에 N개의 자연수가 주어진다. 각 자연수는 100을 넘지 않는다.


출력
봉우리의 개수를 출력하세요.


예시 입력 1 
5
5 3 7 2 3
3 7 1 6 1
7 2 5 3 4
4 3 6 4 1
8 7 3 5 2

예시 출력 1
10
 */
package two.ten;

import java.util.*;
class Main {	
	int[] dx={-1, 0, 1, 0}; // 방향 배열
	int[] dy={0, 1, 0, -1}; // 방향 배열
	public int solution(int n, int[][] arr){
		int answer=0;
		for(int i=0; i<n; i++){
			for(int j=0; j<n; j++){
				boolean flag=true;
				for(int k=0; k<4; k++){
					int nx=i+dx[k]; // nx = 4방향을 보기위한 행 좌표 // -1  0  1  0
					int ny=j+dy[k]; // ny = 4방향을 보기위한 열 좌표 //  0  1  0 -1  // 이 2개를 배열로 하면 상하좌우 체크가능
					if(nx>=0 && nx<n && ny>=0 && ny<n && arr[nx][ny]>=arr[i][j]){ // arr[nx][ny]>=arr[i][j] -> 나보다 크거나 같은게 있으면 봉우리가 아니야
						flag=false;                                               // nx>=0 && nx<n && ny>=0 && ny<n -> 경계선 처리 ArrayIndexOutOfBoundery Exception 
						break;
					}
				}
				if(flag) answer++;
			}
		}
		return answer;
	}

	public static void main(String[] args){
		Main T = new Main();
		Scanner kb = new Scanner(System.in);
		int n=kb.nextInt();
		int[][] arr=new int[n][n];
		for(int i=0; i<n; i++){
			for(int j=0; j<n; j++){
				arr[i][j]=kb.nextInt();
			}
		}
		System.out.print(T.solution(n, arr));
	}
}